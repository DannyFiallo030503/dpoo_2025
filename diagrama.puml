@startuml
skinparam classAttributeIconSize 0
hide empty members
hide circle
skinparam shadowing false

class Utils {
    +validarCarnetIdentidad(carnet: String): boolean
    +validarRangoDouble(valor: double, min: double, max: double): boolean
    +validarRangoInt(valor: int, min: int, max: int): boolean
    +generarNumeroTrabajadorUnico(empleados: ArrayList<Employee>): String
    +validarSoloLetras(input: String): boolean
    +validarLetrasCaracteresPermitidos(input: String): boolean
    +validarNumeroEspecial(input: String): boolean
    +validarEmail(email: String): boolean
}

enum SolidDisc {
    CD
    DVD
}

enum EducationLevel {
    Primary
    Secondary
    Higher
    University
}

class MusicalProduct implements PricingStrategy {
    #price : double
    #mediaType : SolidDisc
    +getPrice(): double
    +setPrice(price: double): void
    +getMediaType(): SolidDisc
    +setMediaType(mediaType: SolidDisc): void
    +calculatePrice(): double
    +print(): void
}

class MediaContentBase implements MultimediaContent {
    #title : String
    #genre : String
    #duration : int
    #fileSize : double
    +getTitle(): String
    +setTitle(title: String): void
    +getGenre(): String
    +setGenre(genre: String): void
    +getDuration(): int
    +setDuration(duration: int): void
    +getFileSize(): double
    +setFileSize(fileSize: double): void
    +print(): void
    +searchColaborator(name: String): Artist
    +searchColaboratorPos(name: String): int
    +addColaborator(name: String, bio: String): boolean
    +deleteColaborator(name: String): Artist
    +calculateSize(): double
}

interface MultimediaContent {
    +calculateSize(): double
    +print(): void
    +searchColaboratorPos(name: String): int
    +addColaborator(name: String, bio: String): boolean
    +deleteColaborator(name: String): Artist
    +searchColaborator(name: String): Artist
    +getTitle(): String
}

interface PricingStrategy {
    +calculatePrice(): double
}

class RecordingService {
    -baseCost : double
    -dataCostPerGB : double
    -dataSizeGB : double
    +getBaseCost(): double
    +setBaseCost(baseCost: double): void
    +getDataCostPerGB(): double
    +setDataCostPerGB(dataCostPerGB: double): void
    +getDataSizeGB(): double
    +setDataSizeGB(dataSizeGB: double): void
    +print(): void
}

class Album {
    -title : String
    -songs : ArrayList<Song>
    +getTitle(): String
    +setTitle(title: String): void
    +getSongs(): ArrayList<Song>
    +setSongs(songs: ArrayList<Song>): void
    +searchSong(title: String): Song
    +searchSongPos(title: String): int
    +addSong(song: Song): boolean
    +deleteSong(title: String): Song
    +totalSize(): double
}

class Disc extends MusicalProduct {
    -content : ArrayList<MultimediaContent>
    +getContent(): ArrayList<MultimediaContent>
    +setContent(content: ArrayList<MultimediaContent>): void
    +print(): void
    +searchContent(title: String): MultimediaContent
    +searchContentPos(title: String): int
    +addContent(content: MultimediaContent): boolean
    +deleteContent(title: String): MultimediaContent
}

class VideoClip extends MediaContentBase {
    -resolution : String
    +getResolution(): String
    +setResolution(resolution: String): void
    +calculateSize(): double
    +print(): void
}

class Song extends MediaContentBase {
    -album : Album
    +getAlbum(): Album
    +setAlbum(album: Album): void
    +calculateSize(): double
    +print(): void
    +isSongOfSameAlbum(song: Song): boolean
}

class Artist {
    -name : String
    -bio : String
    +getName(): String
    +setName(name: String): void
    +getBio(): String
    +setBio(bio: String): void
    +print(): void
}

class Employee {
    -firstName : String
    -lastName : String
    -idNumber : String
    -employeeNumber : String
    -salary : double
    -educationLevel : EducationLevel
    -role : String
    +getFirstName(): String
    +setFirstName(firstName: String): void
    +getLastName(): String
    +setLastName(lastName: String): void
    +getIdNumber(): String
    +setIdNumber(idNumber: String): void
    +getEmployeeNumber(): String
    +setEmployeeNumber(employees: ArrayList<Employee>): void
    +getSalary(): double
    +setSalary(salary: double): void
    +getEducationLevel(): EducationLevel
    +setEducationLevel(educationLevel: EducationLevel): void
    +getRole(): String
    +setRole(role: String): void
    +print(): void
}

class Store {
    -name : String
    -address : String
    -phone : String
    -manager : Employee
    -managerStartDate : LocalDate
    -employees : ArrayList<Employee>
    -products : ArrayList<MusicalProduct>
    -customRecordingServices : ArrayList<RecordingService>
    +getName(): String
    +setName(name: String): void
    +getAddress(): String
    +setAddress(address: String): void
    +getPhone(): String
    +setPhone(phone: String): void
    +getManager(): Employee
    +setManager(manager: Employee): void
    +getManagerStartDate(): LocalDate
    +setManagerStartDate(managerStartDate: LocalDate): void
    +getEmployees(): ArrayList<Employee>
    +setEmployees(employees: ArrayList<Employee>): void
    +getProducts(): ArrayList<MusicalProduct>
    +setProducts(products: ArrayList<MusicalProduct>): void
    +getCustomRecordingServices(): ArrayList<RecordingService>
    +setCustomRecordingServices(customRecordingServices: ArrayList<RecordingService>): void
    +searchEmployee(id: String): Employee
    +searchEmployeePos(id: String): int
    +addEmployee(employee: Employee): boolean
    +deleteEmployee(id: String): Employee
    +searchProduct(name: String): MusicalProduct
    +searchProductPos(name: String): int
    +addProduct(product: MusicalProduct): boolean
    +deleteMusicalProduct(name: String): MusicalProduct
    +searchRecordingService(name: String): RecordingService
    +searchRecordingServicetPos(name: String): int
    +addRecordingService(product: MusicalProduct): boolean
    +deleteRecordingService(name: String): RecordingService
    +print(): void
}

' Relaciones de herencia e implementación
PricingStrategy <|.. MusicalProduct
MultimediaContent <|.. MediaContentBase
MediaContentBase <|-- VideoClip
MediaContentBase <|-- Song
MusicalProduct <|-- Disc

' Relaciones de asociación (1 a muchos)
MediaContentBase "1" *-- "0..*" Artist : author
MediaContentBase "1" *-- "0..*" Artist : performer
MediaContentBase "1" *-- "0..*" Artist : collaborators

Disc "1" *-- "0..*" MultimediaContent : content
Album "1" *-- "0..*" Song : songs
Store "1" *-- "0..*" Employee : employees
Store "1" *-- "0..*" MusicalProduct : products
Store "1" *-- "0..*" RecordingService : customRecordingServices

' Relaciones simples
MusicalProduct --> SolidDisc
Song --> Album
Employee --> EducationLevel
Store --> Employee : manager
@enduml